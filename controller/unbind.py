import re
from xml.etree import ElementTree
from controller import replaceAddWithAnimated


def unbindVectors(layer: ElementTree.Element):
    for addNodeParent in layer.findall(".//add[@type='vector']/.."):
        for addNode in addNodeParent:
            patternMatches = re.match(r'''<add\s+type="vector">\n\s+<lhs>\n\s+<add\s+type="vector">\n\s+<lhs>\n\s+<add\s+type="vector">\n\s+<lhs>\n\s+<vector>\n\s+<x>.*<\/x>\n\s+<y>.*<\/y>\n\s+<\/vector>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="vector">\n\s+<link>\n\s+<vector>\n\s+<x>.*<\/x>\n\s+<y>.*<\/y>\n\s+<\/vector>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="vector">\n\s+<link>\n\s+<vector>\n\s+<x>.*<\/x>\n\s+<y>.*<\/y>\n\s+<\/vector>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<add\s+type="vector">\n\s+<lhs>\n\s+<scale\s+type="vector">\n\s+<link>\n\s+<vector>\n\s+<x>.*<\/x>\n\s+<y>.*<\/y>\n\s+<\/vector>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="vector">\n\s+<link>\n\s+<vector>\n\s+<x>.*<\/x>\n\s+<y>.*<\/y>\n\s+<\/vector>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>''', ElementTree.tostring(addNode).decode("utf-8"))
            if patternMatches:
                elements = [
                    [addNode[0][0][0][0][0][0][0].text, addNode[0][0][0][0][0][0][1].text],
                    [addNode[0][0][0][0][1][0][0][0][0].text, addNode[0][0][0][0][1][0][0][0][1].text],
                    [addNode[1][0][0][0][0][0][0].text, addNode[1][0][0][0][0][0][1].text],
                    [addNode[0][0][1][0][0][0][0].text, addNode[0][0][1][0][0][0][1].text],
                    [addNode[1][0][1][0][0][0][0].text, addNode[1][0][1][0][0][0][1].text]
                ]
                replaceAddWithAnimated(elements=elements, elementType="vector", addNodeParent=addNodeParent, addNode=addNode)

def unbindReals(layer: ElementTree.Element):
    for addNodeParent in layer.findall(".//add[@type='real']/.."):
        for addNode in addNodeParent:
            patternMatches = re.match(r'''<add\s+type="real">\n\s+<lhs>\n\s+<add\s+type="real">\n\s+<lhs>\n\s+<add\s+type="real">\n\s+<lhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<add\s+type="real">\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>''', ElementTree.tostring(addNode).decode("utf-8"))
            if patternMatches:
                elements = [
                    addNode[0][0][0][0][0][0].attrib["value"],
                    addNode[0][0][0][0][1][0][0][0].attrib["value"],
                    addNode[1][0][0][0][0][0].attrib["value"],
                    addNode[0][0][1][0][0][0].attrib["value"],
                    addNode[1][0][1][0][0][0].attrib["value"]
                ]
                replaceAddWithAnimated(elements=elements, elementType="real", addNodeParent=addNodeParent, addNode=addNode)

def unbindAngles(layer):
        for addNodeParent in layer.findall(".//add[@type='angle']/.."):
            for addNode in addNodeParent:
                patternMatches = re.match(r'''<add\s+type="angle">\n\s+<lhs>\n\s+<add\s+type="angle">\n\s+<lhs>\n\s+<add\s+type="angle">\n\s+<lhs>\n\s+<angle\s+value=".*"\s*\/>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="angle">\n\s+<link>\n\s+<angle\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="angle">\n\s+<link>\n\s+<angle\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<add\s+type="angle">\n\s+<lhs>\n\s+<scale\s+type="angle">\n\s+<link>\n\s+<angle\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="angle">\n\s+<link>\n\s+<angle\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>''', ElementTree.tostring(addNode).decode("utf-8"))
                if patternMatches:
                    elements = [
                        addNode[0][0][0][0][0][0].attrib["value"],
                        addNode[0][0][0][0][1][0][0][0].attrib["value"],
                        addNode[1][0][0][0][0][0].attrib["value"],
                        addNode[0][0][1][0][0][0].attrib["value"],
                        addNode[1][0][1][0][0][0].attrib["value"]
                    ]
                    replaceAddWithAnimated(elements=elements, elementType="angle", addNodeParent=addNodeParent, addNode=addNode)

def unbindColors(layer: ElementTree.Element):
    for addNodeParent in layer.findall(".//add[@type='color']/.."):
        for addNode in addNodeParent:
            patternMatches = re.findall(r'''<add\s+type="color">\n\s+<lhs>\n\s+<add\s+type="color">\n\s+<lhs>\n\s+<add\s+type="color">\n\s+<lhs>\n\s+<color>\n\s+<r>.*<\/r>\n\s+<g>.*<\/g>\n\s+<b>.*<\/b>\n\s+<a>.*<\/a>\n\s+<\/color>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="color">\n\s+<link>\n\s+<color>\n\s+<r>.*<\/r>\n\s+<g>.*<\/g>\n\s+<b>.*<\/b>\n\s+<a>.*<\/a>\n\s+<\/color>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="color">\n\s+<link>\n\s+<color>\n\s+<r>.*<\/r>\n\s+<g>.*<\/g>\n\s+<b>.*<\/b>\n\s+<a>.*<\/a>\n\s+<\/color>\n\s+<\/link>\n\s+<scalar>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/link>\n\s+<\/range>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/lhs>\n\s+<rhs>\n\s+<add\s+type="color">\n\s+<lhs>\n\s+<scale\s+type="color">\n\s+<link>\n\s+<color>\n\s+<r>.*<\/r>\n\s+<g>.*<\/g>\n\s+<b>.*<\/b>\n\s+<a>.*<\/a>\n\s+<\/color>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectorx\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/lhs>\n\s+<rhs>\n\s+<scale\s+type="color">\n\s+<link>\n\s+<color>\n\s+<r>.*<\/r>\n\s+<g>.*<\/g>\n\s+<b>.*<\/b>\n\s+<a>.*<\/a>\n\s+<\/color>\n\s+<\/link>\n\s+<scalar>\n\s+<subtract\s+type="real">\n\s+<scalar>\n\s+<reciprocal\s+type="real">\n\s+<link>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/link>\n\s+<epsilon>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/epsilon>\n\s+<infinite>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/infinite>\n\s+<\/reciprocal>\n\s+<\/scalar>\n\s+<lhs>\n\s+<range\s+type="real">\n\s+<min>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/min>\n\s+<max>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/max>\n\s+<link>\n\s+<scale\s+type="real">\n\s+<link>\n\s+<vectory\s+type="real"\s+vector=".*"\s*\/>\n\s+<\/link>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/link>\n\s+<\/range>\n\s+<\/lhs>\n\s+<rhs>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/rhs>\n\s+<\/subtract>\n\s+<\/scalar>\n\s+<\/scale>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>\n\s+<\/rhs>\n\s+<scalar>\n\s+<real\s+value=".*"\s*\/>\n\s+<\/scalar>\n\s+<\/add>''', ElementTree.tostring(addNode).decode("utf-8"))
            if patternMatches:
                elements = [
                    [addNode[0][0][0][0][0][0][0].text, addNode[0][0][0][0][0][0][1].text, addNode[0][0][0][0][0][0][2].text, addNode[0][0][0][0][0][0][3].text ],
                    [addNode[0][0][0][0][1][0][0][0][0].text, addNode[0][0][0][0][1][0][0][0][1].text, addNode[0][0][0][0][1][0][0][0][2].text, addNode[0][0][0][0][1][0][0][0][3].text, addNode[0][0][0][0][1][0][0][0][3].text],
                    [addNode[1][0][0][0][0][0][0].text, addNode[1][0][0][0][0][0][1].text, addNode[1][0][0][0][0][0][2].text, addNode[1][0][0][0][0][0][3].text],
                    [addNode[0][0][1][0][0][0][0].text, addNode[0][0][1][0][0][0][1].text, addNode[0][0][1][0][0][0][2].text, addNode[0][0][1][0][0][0][3].text],
                    [addNode[1][0][1][0][0][0][0].text, addNode[1][0][1][0][0][0][1].text, addNode[1][0][1][0][0][0][2].text, addNode[1][0][1][0][0][0][3].text]
                ]
                replaceAddWithAnimated(elements=elements, elementType="color", addNodeParent=addNodeParent, addNode=addNode)

def unbindJoystick(root, fileRoot):
  unbindVectors(root)
  unbindReals(root)
  unbindColors(root)
  unbindAngles(root)
